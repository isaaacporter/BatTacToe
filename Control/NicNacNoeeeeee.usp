              
#CATEGORY "47" // Adagio (AMS)
/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: 
Comments:
*/

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DEFINE_CONSTANT GRIDSIZE 3
#DEFINE_CONSTANT SQGRIDSIZE 9


/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
            DIGITAL_INPUT END_GAME;
            DIGITAL_INPUT NEXT_GAME;
            DIGITAL_INPUT SET_GRID[SQGRIDSIZE];

            DIGITAL_OUTPUT END_GAME_BATMAN;
            DIGITAL_OUTPUT END_GAME_JOKER;
            DIGITAL_OUTPUT END_GAME_CATWOMAN;
                                         
            ANALOG_OUTPUT BATMAN_COUNT;
            ANALOG_OUTPUT JOKER_COUNT;
            ANALOG_OUTPUT GRID[SQGRIDSIZE];
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
   INTEGER BOARD[2][2],
           CURRENTPLAYER,
           OLDPLAYER,
           LASTPLACEDROW,
           LASTPLACEDCOLUMN;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function SETBOARD()
{
            END_GAME_BATMAN = 0;
            END_GAME_JOKER = 0;
            END_GAME_CATWOMAN = 0;                             
            CURRENTPLAYER = 1;
            OLDPLAYER = 4;
}

Function RESET_COUNT()
{
 			BATMAN_COUNT = 0;
            JOKER_COUNT = 0; 
}
Function SWITCHPLAYER()
{
   			INTEGER TEMP;

     		TEMP = CURRENTPLAYER;
     		CURRENTPLAYER = OLDPLAYER;                                      // Switches players from 1 to 4, or 4 to 1
     		OLDPLAYER = TEMP;
}

Function CLEAR_BOARD()
{
           integer i,j;
            for (i = 0 to 2)
            {
                        for (j = 0 to 2)
                        {
                                    BOARD[i][j] = 0;                // Sets every cell in BOARD to zero
                        }
            }
            SETBOARD();
}

Integer_Function GET_CELL_STATE(integer ROW, integer COL)
{
           if (BOARD[ROW][COL] = 1)                                 // If cell has 1 (BATMAN), return 1
            {
            return (1);
            }
            
            else if (BOARD[ROW][COL] = 4)                           // If cell has 4 (JOKER), return 4
            {
            return (4);
            }
            else return (0);                                        // Return empty cell

}
Function UPDATE_BOARD()
{
            integer i, rows, column;
            for (i = 1 to SQGRIDSIZE)
            {
                       column = (i - 1) % GRIDSIZE;
                       rows = ((i - 1) - column) / GRIDSIZE;
                       GRID[i] = GET_CELL_STATE(rows, column);
            }
}


Function SET_CELL_STATE(integer ROW, integer COL)
{
            BOARD[ROW][COL] = CURRENTPLAYER;                     // Sets BOARD to CURRENTPLAYER, 1 for BATMAN or 4 for JOKER
}
   
Integer_Function CHECK_IF_WIN()
{
        if
                        (  
                           BOARD[LASTPLACEDROW] [0]     = CURRENTPLAYER
                        && BOARD[LASTPLACEDROW] [1]     = CURRENTPLAYER
                        && BOARD[LASTPLACEDROW] [2]     = CURRENTPLAYER 

                        || BOARD[0] [LASTPLACEDCOLUMN]  = CURRENTPLAYER
                        && BOARD[1] [LASTPLACEDCOLUMN]  = CURRENTPLAYER
                        && BOARD[2] [LASTPLACEDCOLUMN]  = CURRENTPLAYER


                        || LASTPLACEDROW = LASTPLACEDCOLUMN            
                        && BOARD[0] [0]                 = CURRENTPLAYER
                        && BOARD[1] [1]                 = CURRENTPLAYER
                        && BOARD[2] [2]                 = CURRENTPLAYER

                        || LASTPLACEDROW + LASTPLACEDCOLUMN = 2 
                        && BOARD[0] [2]                 = CURRENTPLAYER
                        && BOARD[1] [1]                 = CURRENTPLAYER
                        && BOARD[2] [0]                 = CURRENTPLAYER
                        )
                        return(1);

                        else return (0);
                        
}

Integer_Function CHECK_IF_DRAW()
{
		INTEGER COUNT;
		INTEGER I,J,M,N;
		INTEGER ROW[2];
		INTEGER COLUMN[2];
		INTEGER DIAGONAL[2];
	
		FOR (I = 0 to 2)
		{
			FOR ( J = 0 to 2)
			{
				ROW[I] = ROW[I] + BOARD[I][J];
				COLUMN[I] = COLUMN[I] + BOARD[J][I];
			}
		}
		
		FOR (M = 0 TO 2)
		{
			DIAGONAL[0] = DIAGONAL[0] + BOARD[M][M];
		}
		
		DIAGONAL[1] = (BOARD[3][1] + BOARD[2][2] + BOARD[1][3]);
		DIAGONAL[2] = 0;
		
		FOR (N = 0 TO 2)
		{
			IF (ROW[N] = 5 || ROW[N] = 6 || ROW[N] = 9)
			{
				COUNT = COUNT + 1;
			}
			IF (COLUMN[N] = 5 || COLUMN[N] = 6 || COLUMN[N] = 9)
			{
				COUNT = COUNT + 1;
			}
			IF (DIAGONAL[N] = 5 || DIAGONAL[N] = 6 || DIAGONAL[N] = 9)
			{
				COUNT = COUNT + 1;
			}
		}
		
		IF (COUNT = 8)
			{
			RETURN (1);
			}
	
		ELSE{
			RETURN (0);
			}
		}
Integer_Function CHECK_BOARD()
{           
		if (CHECK_IF_WIN() = 1)         
		return(CURRENTPLAYER);                   // Returns CURRENTPLAYER if they win
		            
		else if (CHECK_IF_DRAW() = 1)
		return (10);                             // Returns 10 if draw
		                        
		else return (0);                         // Reurns 0 if continue
}                                    


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Threadsafe PUSH END_GAME
{
            CLEAR_BOARD();
            UPDATE_BOARD();
			RESET_COUNT();
}          

Threadsafe PUSH NEXT_GAME
{
            CLEAR_BOARD();
            UPDATE_BOARD();
}
Threadsafe PUSH SET_GRID
{
            integer i;
            i = GetLastModifiedArrayIndex();
            i = i - 1;
            LASTPLACEDCOLUMN = i % GRIDSIZE;
            LASTPLACEDROW = (i - LASTPLACEDCOLUMN) / GRIDSIZE;
             
            if (GET_CELL_STATE(LASTPLACEDROW, LASTPLACEDCOLUMN)= 0)
			{
            	SET_CELL_STATE(LASTPLACEDROW, LASTPLACEDCOLUMN);
            	UPDATE_BOARD();
            	if (CHECK_BOARD() = 1)							// If CheckBoard = 1, Batman wins, increase count, send 1
            	{
            		BATMAN_COUNT = BATMAN_COUNT + 1;
                	END_GAME_BATMAN= 1;
            	}
     
           		if (CHECK_BOARD() = 4)							// If CheckBoard = 4, Joker wins, increase count, send 1
       	     	{
               		JOKER_COUNT = JOKER_COUNT + 1;
              		END_GAME_JOKER = 1;
            	}

            	if (CHECK_BOARD() = 10)							// If CheckBoard = 10, Draw, send 1
            	{
            		END_GAME_CATWOMAN = 1;
            	}
            
            	SWITCHPLAYER();
			}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	CLEAR_BOARD();
    UPDATE_BOARD();
	RESET_COUNT();
        
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
