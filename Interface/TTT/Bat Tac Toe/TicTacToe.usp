/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: 
Comments:
*/

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DEFINE_CONSTANT GRIDSIZE 3
#DEFINE_CONSTANT SQGRIDSIZE 9


/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
	DIGITAL_INPUT END_GAME;
	DIGITAL_INPUT NEXT_GAME;
	DIGITAL_INPUT SET_GRID[SQGRIDSIZE];

    ANALOG_OUTPUT END_GAME_SCENARIO;
	ANALOG_OUTPUT GRID[SQGRIDSIZE];
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
   INTEGER BOARD[2][2],
    	   CURRENTPLAYER,
           OLDPLAYER,
           LASTPLACEDROW,
           LASTPLACEDCOLUMN;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function SETBOARD()
{
 		CURRENTPLAYER = 1;
		OLDPLAYER = 4;
}
Function SWITCHPLAYER()
{
     INTEGER TEMP;

     TEMP = CURRENTPLAYER;
	 CURRENTPLAYER = OLDPLAYER;				// Switches players from 1 to 4, or 4 to 1
	 OLDPLAYER = TEMP;
}

Function CLEAR_BOARD()
{
 	integer i,j;
	for (i = 0 to 2)
	{
		for (j = 0 to 2)
		{
			BOARD[i][j] = 0;				// Sets every cell in BOARD to zero
		}
	}
	SETBOARD();
}

Integer_Function GET_CELL_STATE(integer ROW, integer COL)
{
 	if (BOARD[ROW][COL] = 1)				// If cell has 1 (BATMAN), return 1
	{
	return (1);
	}
	
	else if (BOARD[ROW][COL] = 4)			// If cell has 4 (JOKER), return 4
	{
	return (4);
	}
	else return (0);						// Return empty cell

}
Function UPDATE_BOARD()
{
	integer i, rows, column;
	for (i = 1 to SQGRIDSIZE)
	{
		column = (i - 1) % GRIDSIZE;
		rows = ((i - 1) - column) / GRIDSIZE;
		GRID[i] = GET_CELL_STATE(rows, column);
	}
}
 

Function SET_CELL_STATE(integer ROW, integer COL)
{
	BOARD[ROW][COL] = CURRENTPLAYER;		// Sets BOARD to CURRENTPLAYER, 1 for BATMAN or 4 for JOKER
}
   
Integer_Function CHECK_IF_WIN()
{
        if
		(  
		   BOARD[LASTPLACEDROW] [0]     = CURRENTPLAYER
		&& BOARD[LASTPLACEDROW] [1]	    = CURRENTPLAYER
		&& BOARD[LASTPLACEDROW] [2]	    = CURRENTPLAYER	

		|| BOARD[0] [LASTPLACEDCOLUMN] 	= CURRENTPLAYER
		&& BOARD[1] [LASTPLACEDCOLUMN]	= CURRENTPLAYER
		&& BOARD[2] [LASTPLACEDCOLUMN]	= CURRENTPLAYER


		|| LASTPLACEDROW = LASTPLACEDCOLUMN	
		&& BOARD[0] [0]					= CURRENTPLAYER
		&& BOARD[1] [1]					= CURRENTPLAYER
		&& BOARD[2] [2]					= CURRENTPLAYER

		|| LASTPLACEDROW + LASTPLACEDCOLUMN = 2 
		&& BOARD[0] [2]					= CURRENTPLAYER
		&& BOARD[1] [1]					= CURRENTPLAYER
		&& BOARD[2] [0]					= CURRENTPLAYER
		)
		return(1);

		else return (0);
		
}

Integer_Function CHECK_IF_DRAW()
{
       


	INTEGER COUNT,
			ROW1,
			ROW2,
			ROW3,
			COLUMN1,
			COLUMN2,
			COLUMN3,
			DIAGONAL1,
			DIAGONAL2;

	COUNT = 0;
	ROW1 = (BOARD[1][1] + BOARD[2][1] + BOARD[3][1]);
	ROW2 = (BOARD[1][2] + BOARD[2][2] + BOARD[3][2]);
	ROW3 = (BOARD[1][3] + BOARD[2][3] + BOARD[3][3]);

	COLUMN1 = (BOARD[1][1] + BOARD[1][2] + BOARD[1][3]);
	COLUMN2 = (BOARD[2][1] + BOARD[2][2] + BOARD[2][3]);
	COLUMN3 = (BOARD[3][1] + BOARD[3][2] + BOARD[3][3]);

	DIAGONAL1 = (BOARD[1][1] + BOARD[2][2] + BOARD[3][3]);
	DIAGONAL2 = (BOARD[3][1] + BOARD[2][2] + BOARD[1][3]);
	
	IF ((COLUMN1 = 5) || (COLUMN1 = 6) || (COLUMN1 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF ((COLUMN2 = 5) || (COLUMN2 = 6) || (COLUMN2 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF ((COLUMN3 = 5) || (COLUMN3 = 6) || (COLUMN3 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF ((ROW1 = 5) || (ROW1 = 6) || (ROW1 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF ((ROW2 = 5) || (ROW2 = 6) || (ROW2 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF ((ROW3 = 5) || (ROW3 = 6) || (ROW3 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF ((DIAGONAL1 = 5) || (DIAGONAL1 = 6) || (DIAGONAL1 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF ((DIAGONAL2 = 5) || (DIAGONAL2 = 6) || (DIAGONAL2 = 9))
		{
		COUNT = COUNT + 1;
		}
	
	IF (COUNT = 8)
		{
		RETURN (1);
		}
		ELSE
			{
			RETURN (0);
			}
}

Integer_Function CHECK_BOARD()
{ 	if (CHECK_IF_WIN() = 1)         

	return(CURRENTPLAYER);       		// Returns CURRENTPLAYER if they win
	
	else if (CHECK_IF_DRAW() = 1)
	return (10);						// Returns 10 if draw
		
	else return (0);					// Reurns 0 if continue
}        			 


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Threadsafe PUSH END_GAME
{
		CLEAR_BOARD();
		UPDATE_BOARD();
}          

Threadsafe PUSH NEXT_GAME
{
 		CLEAR_BOARD();
		UPDATE_BOARD();
}
Threadsafe PUSH SET_GRID
{
 	integer i;
	i = GetLastModifiedArrayIndex();
	i = i - 1;
	LASTPLACEDCOLUMN = i % GRIDSIZE;
	LASTPLACEDROW = (i - LASTPLACEDCOLUMN) / GRIDSIZE;
 
	SET_CELL_STATE(LASTPLACEDROW, LASTPLACEDCOLUMN);
	UPDATE_BOARD();
	if (CHECK_BOARD() = CURRENTPLAYER)
	{
		END_GAME_SCENARIO = CURRENTPLAYER;
	}
     
	if (CHECK_BOARD() = 10)
	{
     	END_GAME_SCENARIO = 10;
	}
	SWITCHPLAYER();
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	 CLEAR_BOARD();
	 SETBOARD();

    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
	